name: Automated Code Review

on:
  workflow_run:
    workflows: ["Auto Fix Style"]
    types: [completed]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: code-review-${{ github.event.workflow_run.head_sha }}
  cancel-in-progress: true

jobs:
  detect-changes:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      cs: ${{ steps.filter.outputs.cs }}
      bicep: ${{ steps.filter.outputs.bicep }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            cs:
              - '**/*.cs'
            bicep:
              - '**/*.bicep'
            frontend:
              - '**/*.js'
              - '**/*.ts'
              - '**/*.tsx'

  lint-csharp:
    needs: detect-changes
    if: needs.detect-changes.outputs.cs == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore
        run: dotnet restore OTP.sln
        working-directory: ./src/OTP

      - name: Build
        run: dotnet build OTP.sln --no-restore
        working-directory: ./src/OTP

      - name: Verify formatting
        run: dotnet format OTP.sln --verify-no-changes
        working-directory: ./src/OTP

  lint-bicep:
    needs: detect-changes
    if: needs.detect-changes.outputs.bicep == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - name: Install Bicep CLI
        run: az bicep install
      - name: Bicep build
        run: bicep build infrastructure/bicep/**/*.bicep
      - name: Bicep lint
        run: bicep lint infrastructure/bicep/**/*.bicep

  lint-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm run lint

  sonar-review:
    needs: [lint-csharp, lint-bicep, lint-frontend]
    if: |
      needs.detect-changes.outputs.cs == 'true' ||
      needs.detect-changes.outputs.bicep == 'true' ||
      needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Bicep -> JSON (IaC analysis)
      - name: Install Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - name: Install Bicep CLI
        run: az bicep install
      - name: Compile Bicep to JSON
        run: |
          mkdir -p bicep-json
          shopt -s nullglob
          for file in infrastructure/bicep/**/*.bicep infrastructure/bicep/*.bicep; do
            out="bicep-json/$(basename "$file" .bicep).json"
            echo "Compiling $file -> $out"
            bicep build "$file" --outdir bicep-json
          done
          shopt -u nullglob

      # Start SonarQube (image with HTML report plugin)
      - name: Start SonarQube with HTML report plugin
        run: |
          docker run -d --name sonarqube \
            -p 9000:9000 \
            ghcr.io/<org>/sonarqube-community-report:latest
          echo "Waiting for SonarQube..."
          for i in {1..30}; do
            if curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; then
              break
            fi
            sleep 5
          done

      - name: Create SonarQube admin token
        run: |
          TOKEN_NAME="ci-token"
          SONAR_TOKEN=$(curl -u admin:admin -X POST \
            "http://localhost:9000/api/user_tokens/generate?name=${TOKEN_NAME}" | jq -r .token)
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
          curl -u admin:admin -X POST \
            "http://localhost:9000/api/users/change_password?login=admin&previousPassword=admin&password=newadminpass"

      - name: Ensure SonarQube Project exists
        run: |
          PROJECT_KEY="otp-access-demo-${{ github.repository }}"
          if ! curl -s -u ${SONAR_TOKEN}: \
            "http://localhost:9000/api/projects/search?projects=$PROJECT_KEY" | grep -q "$PROJECT_KEY"; then
            echo "Creating SonarQube project: $PROJECT_KEY"
            curl -s -u ${SONAR_TOKEN}: -X POST \
              "http://localhost:9000/api/projects/create?name=OTP%20Access%20Demo&project=$PROJECT_KEY"
          fi
          echo "PROJECT_KEY=$PROJECT_KEY" >> $GITHUB_ENV

      # .NET build in same job (only if C# changed)
      - uses: actions/setup-dotnet@v4
        if: needs.detect-changes.outputs.cs == 'true'
        with:
          dotnet-version: "8.0.x"
      - name: Restore (.NET) for Sonar
        if: needs.detect-changes.outputs.cs == 'true'
        run: dotnet restore OTP.sln
        working-directory: ./src/OTP
      - name: Build (.NET) for Sonar
        if: needs.detect-changes.outputs.cs == 'true'
        run: dotnet build OTP.sln --no-restore
        working-directory: ./src/OTP

      - name: Create sonar-project.properties
        run: |
          cat <<EOF > sonar-project.properties
          sonar.projectKey=${{ env.PROJECT_KEY }}
          sonar.projectName=OTP Access Demo
          sonar.projectVersion=1.0
          sonar.sources=.,bicep-json
          sonar.exclusions=**/bin/**,**/obj/**,**/node_modules/**,**/*.dll
          sonar.dotnet.excludeTestProjects=true
          sonar.javascript.lcov.reportPaths=coverage/lcov.info
          sonar.typescript.tsconfigPath=tsconfig.json
          sonar.json.fileSuffixes=.json
          sonar.sourceEncoding=UTF-8
          EOF

      - name: SonarQube Scan (multi-language)
        uses: SonarSource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_HOST_URL: http://localhost:9000
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}

      - name: Generate HTML report
        run: |
          curl -s -u admin:newadminpass \
            "http://localhost:9000/api/cnesreport/report?format=html&key=${{ env.PROJECT_KEY }}" \
            -o sonar-report.html || echo "No HTML report (plugin/image missing?)"

      - name: Generate JSON summary
        id: summary
        run: |
          SUMMARY_JSON=$(curl -s -u admin:newadminpass \
            "http://localhost:9000/api/cnesreport/report?format=json&key=${{ env.PROJECT_KEY }}")
          if [ -z "$SUMMARY_JSON" ] || [ "$SUMMARY_JSON" = "null" ]; then
            echo "SUMMARY_MARKDOWN=No summary available." >> $GITHUB_ENV
            exit 0
          fi
          TOTAL_ISSUES=$(echo "$SUMMARY_JSON" | jq '.total_issues // 0')
          BLOCKER=$(echo "$SUMMARY_JSON" | jq '.severity.BLOCKER // 0')
          CRITICAL=$(echo "$SUMMARY_JSON" | jq '.severity.CRITICAL // 0')
          MAJOR=$(echo "$SUMMARY_JSON" | jq '.severity.MAJOR // 0')
          MINOR=$(echo "$SUMMARY_JSON" | jq '.severity.MINOR // 0')
          INFO=$(echo "$SUMMARY_JSON" | jq '.severity.INFO // 0')
          echo "SUMMARY_MARKDOWN=**Issues:** $TOTAL_ISSUES  \n- ðŸ”´ Blocker: $BLOCKER  \n- ðŸŸ  Critical: $CRITICAL  \n- ðŸŸ¡ Major: $MAJOR  \n- ðŸ”µ Minor: $MINOR  \n- âšª Info: $INFO" >> $GITHUB_ENV

      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sonar-html-report
          path: sonar-report.html

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ðŸ›  **SonarQube Code Review Result (multi-language)**
            - Project: `${{ env.PROJECT_KEY }}`
            - ${{ env.SUMMARY_MARKDOWN }}
            - [ðŸ“„ Download HTML report / logs from this run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
