name: Automated Code Review

on:
  workflow_run:
    workflows: ["Auto Fix Style"]
    types: [completed]

permissions:
  contents: read
  pull-requests: write
  checks: write

concurrency:
  group: code-review-${{ github.event.workflow_run.head_sha }}
  cancel-in-progress: true

jobs:
  init:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.findpr.outputs.number }}
      check_id: ${{ steps.create_check.outputs.check_id }}
    steps:
      - id: findpr
        uses: peter-evans/find-pull-request@v3
        with:
          commit-sha: ${{ github.event.workflow_run.head_sha }}

      - name: Fail if no PR found
        if: ${{ steps.findpr.outputs.number == '' }}
        run: echo "No PR found for SHA ${{ github.event.workflow_run.head_sha }}" && exit 1

      - name: Create PR Check (pending)
        id: create_check
        uses: actions/github-script@v7
        with:
          script: |
            const res = await github.request('POST /repos/{owner}/{repo}/check-runs', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Automated Code Review',
              head_sha: '${{ github.event.workflow_run.head_sha }}',
              status: 'in_progress',
              details_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });
            core.setOutput('check_id', res.data.id.toString());

  detect-changes:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      cs: ${{ steps.filter.outputs.cs }}
      bicep: ${{ steps.filter.outputs.bicep }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            cs:
              - '**/*.cs'
            bicep:
              - '**/*.bicep'
            frontend:
              - '**/*.js'
              - '**/*.ts'
              - '**/*.tsx'

  lint-csharp:
    needs: detect-changes
    if: needs.detect-changes.outputs.cs == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
      - run: dotnet restore OTP.sln
        working-directory: ./src/OTP
      - run: dotnet build OTP.sln --no-restore
        working-directory: ./src/OTP
      - run: dotnet format OTP.sln --verify-no-changes
        working-directory: ./src/OTP

  lint-bicep:
    needs: detect-changes
    if: needs.detect-changes.outputs.bicep == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - run: az bicep install
      - run: bicep build infrastructure/bicep/**/*.bicep
      - run: bicep lint infrastructure/bicep/**/*.bicep

  lint-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm run lint

  sonar-review:
    needs: [lint-csharp, lint-bicep, lint-frontend]
    if: |
      needs.detect-changes.outputs.cs == 'true' ||
      needs.detect-changes.outputs.bicep == 'true' ||
      needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      # [SonarQube setup and scanning steps unchanged from your version...]
      # Ensure $SUMMARY_MARKDOWN is set for finalize step

  finalize:
    needs:
      [
        init,
        detect-changes,
        lint-csharp,
        lint-bicep,
        lint-frontend,
        sonar-review,
      ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Determine conclusion
        id: concl
        run: |
          if [ "${{ needs.lint-csharp.result }}" = "failure" ] || \
             [ "${{ needs.lint-bicep.result }}" = "failure" ] || \
             [ "${{ needs.lint-frontend.result }}" = "failure" ] || \
             [ "${{ needs.sonar-review.result }}" = "failure" ]; then
            echo "val=failure" >> $GITHUB_OUTPUT
          else
            echo "val=success" >> $GITHUB_OUTPUT
          fi

      - name: Complete PR Check
        uses: actions/github-script@v7
        with:
          script: |
            await github.request('PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ needs.init.outputs.check_id }},
              status: 'completed',
              conclusion: '${{ steps.concl.outputs.val }}',
              output: {
                title: 'Automated Code Review',
                summary: process.env.SUMMARY_MARKDOWN || 'See workflow logs for details.',
                text: `Project: ${{ env.PROJECT_KEY }}\nRun: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
              }
            });

  report-checks:
    needs:
      [
        init,
        detect-changes,
        lint-csharp,
        lint-bicep,
        lint-frontend,
        sonar-review,
        finalize,
      ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Make per-stage check runs
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const head  = '${{ github.event.workflow_run.head_sha }}';
            const runUrl = `${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}`;

            // Helper to create/update a check
            async function stageCheck(name, result, summary) {
              const conclusion = (result === 'success' || result === 'skipped') ? 'success'
                                : (result === 'cancelled') ? 'neutral'
                                : 'failure';

              await github.request('POST /repos/{owner}/{repo}/check-runs', {
                owner, repo,
                name: `Automated Code Review / ${name}`,
                head_sha: head,
                status: 'completed',
                conclusion,
                details_url: runUrl,
                output: {
                  title: `${name}`,
                  summary: summary || `Job result: ${result}. See logs: ${runUrl}`
                }
              });
            }

            await stageCheck('lint-csharp',   '${{ needs.lint-csharp.result }}',
              'C# restore/build/format. Fails if formatting differs from .editorconfig');
            await stageCheck('lint-bicep',    '${{ needs.lint-bicep.result }}',
              'Bicep build + bicep lint (infrastructure/bicep)');
            await stageCheck('lint-frontend', '${{ needs.lint-frontend.result }}',
              'npm ci + eslint (if JS/TS present)');
            await stageCheck('sonar-review',  '${{ needs.sonar-review.result }}',
              (process.env.SUMMARY_MARKDOWN || 'Sonar scan summary not available.'));
